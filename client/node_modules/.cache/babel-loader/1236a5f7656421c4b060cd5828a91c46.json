{"ast":null,"code":"var _jsxFileName = \"/home/rjmata95/Desktop/Learning/platzi/react/hello-react/src/pages/MainApp.js\";\nimport React from \"react\";\nimport \"./styles/MainApp.css\";\nimport NavBar from \"../components/NavBar\";\nimport EmployeeForm from \"../components/EmployeeForm\";\nimport EmployeeTable from \"../components/EmployeeTable\";\nimport { v4 as uuid } from \"uuid\";\nimport formValidation from \"../components/formValidation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formInitialState = {\n  name: \"\",\n  nameError: null,\n  email: \"\",\n  emailError: null,\n  role: \"\",\n  roleError: null,\n  dob: \"\",\n  dobError: null,\n  gender: \"\",\n  genderError: null\n};\n\nclass mainApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchData = async () => {\n      this.setState({\n        loading: true\n      });\n      setTimeout(() => console.log(\"loading\"), 3000);\n\n      try {\n        const response = await fetch(\"http://localhost:8080/table\");\n        const data = await response.json();\n        this.setState({\n          loading: false,\n          table: {\n            data: data.body\n          }\n        });\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error\n        });\n        console.log(`there's been an error: ${error}`);\n      }\n    };\n\n    this.submitData = async data => {\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const response = await fetch(\"http://localhost:8080/table\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n        });\n        this.setState({\n          loading: false\n        });\n        let parsedResponse = await response.json();\n        return Promise.resolve(parsedResponse.body);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error\n        });\n        console.log(`there was an Error during POST method: ${error}`);\n        return Promise.reject(error);\n      }\n    };\n\n    this.deleteData = async id => {\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const response = await fetch(`http://localhost:8080/table/${id}`, {\n          method: \"DELETE\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: \"\"\n        });\n        const parsedResponse = await response.json();\n\n        if (response.status) {\n          let updatedTable = [...this.state.table.data].filter(element => element._id !== id);\n          console.log(parsedResponse);\n          this.setState({\n            loading: false,\n            table: {\n              data: updatedTable\n            }\n          });\n        } else {\n          this.setState({\n            loading: false\n          });\n          throw \"Server response status is set to Failure\";\n        }\n      } catch (error) {\n        console.log(`there was an Error during DELETE method: ${error}`);\n        this.setState({\n          loading: false,\n          error\n        });\n      }\n    };\n\n    this.formChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n\n      if (name === \"dob\") {\n        let dobError = formValidation.validateDOB(value);\n        this.setState(state => ({\n          form: { ...state.form,\n            [name]: value,\n            dobError\n          }\n        }));\n      } else {\n        this.setState(state => ({\n          form: { ...state.form,\n            [e.target.name]: e.target.value\n          }\n        }));\n      }\n    };\n\n    this.formSubmitted = e => {\n      e.preventDefault(); //validate entries from this.state.form\n\n      let state = this.state;\n      let nameError = formValidation.validateName(state.form.name);\n      let emailError = formValidation.validateEmail(state.form.email);\n      let roleError = formValidation.validateRole(state.form.role);\n      let dobError = formValidation.validateDOB(state.form.dob);\n      let genderError = formValidation.validateGender(state.form.gender);\n      let newData;\n\n      if (nameError === null && emailError === null && roleError === null && dobError === null && genderError === null) {\n        this.submitData(state.form).then(response => {\n          newData = state.table.data.concat({\n            _id: response._id,\n            ...state.form\n          });\n          console.log(response);\n          this.setState({\n            form: formInitialState,\n            table: {\n              data: newData\n            }\n          });\n        }).catch(error => {\n          console.log(error);\n          this.setState({\n            form: formInitialState\n          });\n        });\n      } else {\n        console.log(state);\n        this.setState(state => ({\n          form: { ...state.form,\n            nameError,\n            emailError,\n            roleError,\n            dobError,\n            genderError\n          }\n        }));\n      } //toggle submit to true (may not be necessary)\n\n    };\n\n    this.state = {\n      loading: false,\n      error: null,\n      form: formInitialState,\n      table: {\n        submit: false,\n        data: [// {\n          //   name: \"Raynulfo Mata\",\n          //   email: \"rjmata95@gmail.com\",\n          //   role: \"JrDev\",\n          //   dob: \"12/19/1995\",\n          //   gender: \"male\",\n          // },\n        ]\n      }\n    };\n  }\n\n  componentDidMount() {\n    // this.setState({\n    //   loading: false,\n    // });\n    this.fetchData();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"green-bg\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(EmployeeForm, {\n          onChange: this.formChange,\n          formState: this.state.form,\n          onSubmit: this.formSubmitted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(EmployeeTable, {\n          updateTable: this.state.table.data,\n          deleteHandler: this.deleteData,\n          isLoading: this.state.loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default mainApp;","map":{"version":3,"sources":["/home/rjmata95/Desktop/Learning/platzi/react/hello-react/src/pages/MainApp.js"],"names":["React","NavBar","EmployeeForm","EmployeeTable","v4","uuid","formValidation","formInitialState","name","nameError","email","emailError","role","roleError","dob","dobError","gender","genderError","mainApp","Component","constructor","props","fetchData","setState","loading","setTimeout","console","log","response","fetch","data","json","table","body","error","submitData","method","headers","JSON","stringify","parsedResponse","Promise","resolve","reject","deleteData","id","status","updatedTable","state","filter","element","_id","formChange","e","value","target","validateDOB","form","formSubmitted","preventDefault","validateName","validateEmail","validateRole","validateGender","newData","then","concat","catch","submit","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles/MainApp.css\";\nimport NavBar from \"../components/NavBar\";\nimport EmployeeForm from \"../components/EmployeeForm\";\nimport EmployeeTable from \"../components/EmployeeTable\";\nimport { v4 as uuid } from \"uuid\";\nimport formValidation from \"../components/formValidation\";\n\nconst formInitialState = {\n  name: \"\",\n  nameError: null,\n  email: \"\",\n  emailError: null,\n  role: \"\",\n  roleError: null,\n  dob: \"\",\n  dobError: null,\n  gender: \"\",\n  genderError: null,\n};\nclass mainApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      error: null,\n      form: formInitialState,\n      table: {\n        submit: false,\n        data: [\n          // {\n          //   name: \"Raynulfo Mata\",\n          //   email: \"rjmata95@gmail.com\",\n          //   role: \"JrDev\",\n          //   dob: \"12/19/1995\",\n          //   gender: \"male\",\n          // },\n        ],\n      },\n    };\n  }\n\n  componentDidMount() {\n    // this.setState({\n    //   loading: false,\n    // });\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    this.setState({ loading: true });\n    setTimeout(() => console.log(\"loading\"), 3000);\n    try {\n      const response = await fetch(\"http://localhost:8080/table\");\n      const data = await response.json();\n      this.setState({\n        loading: false,\n        table: { data: data.body },\n      });\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error,\n      });\n      console.log(`there's been an error: ${error}`);\n    }\n  };\n\n  submitData = async (data) => {\n    this.setState({ loading: true });\n    try {\n      const response = await fetch(\"http://localhost:8080/table\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      this.setState({ loading: false });\n      let parsedResponse = await response.json();\n      return Promise.resolve(parsedResponse.body);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error,\n      });\n      console.log(`there was an Error during POST method: ${error}`);\n      return Promise.reject(error);\n    }\n  };\n\n  deleteData = async (id) => {\n    this.setState({ loading: true });\n    try {\n      const response = await fetch(`http://localhost:8080/table/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: \"\",\n      });\n\n      const parsedResponse = await response.json();\n      if (response.status) {\n        let updatedTable = [...this.state.table.data].filter(\n          (element) => element._id !== id\n        );\n        console.log(parsedResponse);\n        this.setState({ loading: false, table: { data: updatedTable } });\n      } else {\n        this.setState({ loading: false });\n        throw \"Server response status is set to Failure\";\n      }\n    } catch (error) {\n      console.log(`there was an Error during DELETE method: ${error}`);\n      this.setState({ loading: false, error });\n    }\n  };\n\n  formChange = (e) => {\n    const { name, value } = e.target;\n    if (name === \"dob\") {\n      let dobError = formValidation.validateDOB(value);\n      this.setState((state) => ({\n        form: {\n          ...state.form,\n          [name]: value,\n          dobError,\n        },\n      }));\n    } else {\n      this.setState((state) => ({\n        form: {\n          ...state.form,\n          [e.target.name]: e.target.value,\n        },\n      }));\n    }\n  };\n\n  formSubmitted = (e) => {\n    e.preventDefault();\n    //validate entries from this.state.form\n    let state = this.state;\n\n    let nameError = formValidation.validateName(state.form.name);\n    let emailError = formValidation.validateEmail(state.form.email);\n    let roleError = formValidation.validateRole(state.form.role);\n    let dobError = formValidation.validateDOB(state.form.dob);\n    let genderError = formValidation.validateGender(state.form.gender);\n    let newData;\n\n    if (\n      nameError === null &&\n      emailError === null &&\n      roleError === null &&\n      dobError === null &&\n      genderError === null\n    ) {\n      this.submitData(state.form)\n        .then((response) => {\n          newData = state.table.data.concat({\n            _id: response._id,\n            ...state.form,\n          });\n          console.log(response);\n          this.setState({ form: formInitialState, table: { data: newData } });\n        })\n        .catch((error) => {\n          console.log(error);\n          this.setState({ form: formInitialState });\n        });\n    } else {\n      console.log(state);\n      this.setState((state) => ({\n        form: {\n          ...state.form,\n          nameError,\n          emailError,\n          roleError,\n          dobError,\n          genderError,\n        },\n      }));\n    }\n\n    //toggle submit to true (may not be necessary)\n  };\n  render() {\n    return (\n      <div className=\"green-bg\">\n        <NavBar />\n        <div>\n          <EmployeeForm\n            onChange={this.formChange}\n            formState={this.state.form}\n            onSubmit={this.formSubmitted}\n          />\n        </div>\n        <div>\n          <EmployeeTable\n            updateTable={this.state.table.data}\n            deleteHandler={this.deleteData}\n            isLoading={this.state.loading}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default mainApp;\n"]},"metadata":{},"sourceType":"module"}