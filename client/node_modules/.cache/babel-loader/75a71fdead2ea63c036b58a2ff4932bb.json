{"ast":null,"code":"var _jsxFileName = \"/home/rjmata95/Desktop/Learning/platzi/react/hello-react/src/pages/MainApp.js\";\nimport React from \"react\";\nimport \"./styles/MainApp.css\";\nimport NavBar from \"../components/NavBar\";\nimport EmployeeForm from \"../components/EmployeeForm\";\nimport EmployeeTable from \"../components/EmployeeTable\";\nimport { v4 as uuid } from \"uuid\";\nimport formValidation from \"../components/formValidation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formInitialState = {\n  name: \"\",\n  nameError: null,\n  email: \"\",\n  emailError: null,\n  role: \"\",\n  roleError: null,\n  dob: \"\",\n  dobError: null,\n  gender: \"\",\n  genderError: null\n};\n\nclass mainApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchData = async () => {\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const response = await fetch(\"http://localhost:8080/table\");\n        const data = await response.json();\n        this.setState({\n          loading: false,\n          table: {\n            data: data.body\n          }\n        });\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error\n        });\n        console.log(`there's been an error: ${error}`);\n      }\n    };\n\n    this.submitData = async data => {\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const response = await fetch(\"http://localhost:8080/table\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n        });\n        this.setState({\n          loading: false\n        });\n        let parsedResponse = await response.json();\n        return Promise.resolve(parsedResponse.body);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error\n        });\n        console.log(`there was an Error during POST method: ${error}`);\n        return Promise.reject(error);\n      }\n    };\n\n    this.setNewEntries = () => {};\n\n    this.formChange = e => {\n      this.setState(state => ({\n        form: { ...state.form,\n          [e.target.name]: e.target.value\n        }\n      }));\n    };\n\n    this.formSubmitted = e => {\n      e.preventDefault(); //validate entries from this.state.form\n\n      let state = this.state;\n      let nameError = formValidation.validateName(state.form.name);\n      let emailError = formValidation.validateEmail(state.form.email);\n      let roleError = formValidation.validateRole(state.form.role);\n      let dobError = formValidation.validateDOB(state.form.dob);\n      let genderError = formValidation.validateGender(state.form.gender);\n      let newData;\n\n      if (nameError === null && emailError === null && roleError === null && dobError === null && genderError === null) {\n        this.submitData(state.form).then(response => {\n          newData = state.table.data.concat({\n            _id: response._id,\n            ...state.form\n          });\n          console.log(response);\n          this.setState({\n            form: formInitialState,\n            table: {\n              data: newData\n            }\n          });\n        }).catch(error => {\n          console.log(error);\n          this.setState({\n            form: formInitialState\n          });\n        });\n      } else {\n        console.log(state);\n        console.log({\n          form: {\n            formInitialState,\n            nameError,\n            emailError,\n            roleError,\n            dobError,\n            genderError\n          }\n        });\n        this.setState({\n          form: {\n            nameError,\n            emailError,\n            roleError,\n            dobError,\n            genderError\n          }\n        }, state => console.log(state));\n      } //toggle submit to true (may not be necessary)\n\n    };\n\n    this.state = {\n      loading: true,\n      error: null,\n      form: formInitialState,\n      table: {\n        submit: false,\n        data: [// {\n          //   name: \"Raynulfo Mata\",\n          //   email: \"rjmata95@gmail.com\",\n          //   role: \"JrDev\",\n          //   dob: \"12/19/1995\",\n          //   gender: \"male\",\n          // },\n        ]\n      }\n    };\n  }\n\n  componentDidMount() {\n    // this.setState({\n    //   loading: false,\n    // });\n    this.fetchData();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"green-bg\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(EmployeeForm, {\n          onChange: this.formChange,\n          formState: this.state.form,\n          onSubmit: this.formSubmitted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(EmployeeTable, {\n          updateTable: this.state.table.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default mainApp;","map":{"version":3,"sources":["/home/rjmata95/Desktop/Learning/platzi/react/hello-react/src/pages/MainApp.js"],"names":["React","NavBar","EmployeeForm","EmployeeTable","v4","uuid","formValidation","formInitialState","name","nameError","email","emailError","role","roleError","dob","dobError","gender","genderError","mainApp","Component","constructor","props","fetchData","setState","loading","response","fetch","data","json","table","body","error","console","log","submitData","method","headers","JSON","stringify","parsedResponse","Promise","resolve","reject","setNewEntries","formChange","e","state","form","target","value","formSubmitted","preventDefault","validateName","validateEmail","validateRole","validateDOB","validateGender","newData","then","concat","_id","catch","submit","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles/MainApp.css\";\nimport NavBar from \"../components/NavBar\";\nimport EmployeeForm from \"../components/EmployeeForm\";\nimport EmployeeTable from \"../components/EmployeeTable\";\nimport { v4 as uuid } from \"uuid\";\nimport formValidation from \"../components/formValidation\";\n\nconst formInitialState = {\n  name: \"\",\n  nameError: null,\n  email: \"\",\n  emailError: null,\n  role: \"\",\n  roleError: null,\n  dob: \"\",\n  dobError: null,\n  gender: \"\",\n  genderError: null,\n};\nclass mainApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      error: null,\n      form: formInitialState,\n      table: {\n        submit: false,\n        data: [\n          // {\n          //   name: \"Raynulfo Mata\",\n          //   email: \"rjmata95@gmail.com\",\n          //   role: \"JrDev\",\n          //   dob: \"12/19/1995\",\n          //   gender: \"male\",\n          // },\n        ],\n      },\n    };\n  }\n\n  componentDidMount() {\n    // this.setState({\n    //   loading: false,\n    // });\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    this.setState({ loading: true });\n    try {\n      const response = await fetch(\"http://localhost:8080/table\");\n      const data = await response.json();\n      this.setState({\n        loading: false,\n        table: { data: data.body },\n      });\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error,\n      });\n      console.log(`there's been an error: ${error}`);\n    }\n  };\n\n  submitData = async (data) => {\n    this.setState({ loading: true });\n    try {\n      const response = await fetch(\"http://localhost:8080/table\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      this.setState({ loading: false });\n      let parsedResponse = await response.json();\n      return Promise.resolve(parsedResponse.body);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error,\n      });\n      console.log(`there was an Error during POST method: ${error}`);\n      return Promise.reject(error);\n    }\n  };\n\n  setNewEntries = () => {};\n\n  formChange = (e) => {\n    this.setState((state) => ({\n      form: {\n        ...state.form,\n        [e.target.name]: e.target.value,\n      },\n    }));\n  };\n\n  formSubmitted = (e) => {\n    e.preventDefault();\n    //validate entries from this.state.form\n    let state = this.state;\n\n    let nameError = formValidation.validateName(state.form.name);\n    let emailError = formValidation.validateEmail(state.form.email);\n    let roleError = formValidation.validateRole(state.form.role);\n    let dobError = formValidation.validateDOB(state.form.dob);\n    let genderError = formValidation.validateGender(state.form.gender);\n    let newData;\n\n    if (\n      nameError === null &&\n      emailError === null &&\n      roleError === null &&\n      dobError === null &&\n      genderError === null\n    ) {\n      this.submitData(state.form)\n        .then((response) => {\n          newData = state.table.data.concat({\n            _id: response._id,\n            ...state.form,\n          });\n          console.log(response);\n          this.setState({ form: formInitialState, table: { data: newData } });\n        })\n        .catch((error) => {\n          console.log(error);\n          this.setState({ form: formInitialState });\n        });\n    } else {\n      console.log(state);\n      console.log({\n        form: {\n          formInitialState,\n          nameError,\n          emailError,\n          roleError,\n          dobError,\n          genderError,\n        },\n      });\n      this.setState(\n        {\n          form: { nameError, emailError, roleError, dobError, genderError },\n        },\n        (state) => console.log(state)\n      );\n    }\n\n    //toggle submit to true (may not be necessary)\n  };\n  render() {\n    return (\n      <div className=\"green-bg\">\n        <NavBar />\n        <div>\n          <EmployeeForm\n            onChange={this.formChange}\n            formState={this.state.form}\n            onSubmit={this.formSubmitted}\n          />\n        </div>\n        <div>\n          <EmployeeTable updateTable={this.state.table.data} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default mainApp;\n"]},"metadata":{},"sourceType":"module"}